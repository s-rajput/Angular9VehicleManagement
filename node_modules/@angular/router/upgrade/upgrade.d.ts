/**
 * @license Angular v9.1.9
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */

import { ComponentRef } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { UpgradeModule } from '@angular/upgrade/static';

/**
 * Creates an initializer that sets up `ngRoute` integration
 * along with setting up the Angular router.
 *
 * @usageNotes
 *
 * <code-example language="typescript">
 * @NgModule({
 *  imports: [
 *   RouterModule.forRoot(SOME_ROUTES),
 *   UpgradeModule
 * ],
 * providers: [
 *   RouterUpgradeInitializer
 * ]
 * })
 * export class AppModule {
 *   ngDoBootstrap() {}
 * }
 * </code-example>
 *
 * @publicApi
 */
export declare const RouterUpgradeInitializer: {
    provide: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;
    multi: boolean;
    useFactory: (ngUpgrade: UpgradeModule) => () => void;
    deps: (typeof UpgradeModule)[];
};

/**
 * Sets up a location change listener to trigger `history.pushState`.
 * Works around the problem that `onPopState` does not trigger `history.pushState`.
 * Must be called *after* calling `UpgradeModule.bootstrap`.
 *
 * @param ngUpgrade The upgrade NgModule.
 * @param urlType The location strategy.
 * @see `HashLocationStrategy`
 * @see `PathLocationStrategy`
 *
 * @publicApi
 */
export declare function setUpLocationSync(ngUpgrade: UpgradeModule, urlType?: 'path' | 'hash'): void;

export { }

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZS5kLnRzIiwic291cmNlcyI6WyJ1cGdyYWRlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXIgdjkuMS45XG4gKiAoYykgMjAxMC0yMDIwIEdvb2dsZSBMTEMuIGh0dHBzOi8vYW5ndWxhci5pby9cbiAqIExpY2Vuc2U6IE1JVFxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBVcGdyYWRlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvdXBncmFkZS9zdGF0aWMnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYW4gaW5pdGlhbGl6ZXIgdGhhdCBzZXRzIHVwIGBuZ1JvdXRlYCBpbnRlZ3JhdGlvblxyXG4gKiBhbG9uZyB3aXRoIHNldHRpbmcgdXAgdGhlIEFuZ3VsYXIgcm91dGVyLlxyXG4gKlxyXG4gKiBAdXNhZ2VOb3Rlc1xyXG4gKlxyXG4gKiA8Y29kZS1leGFtcGxlIGxhbmd1YWdlPVwidHlwZXNjcmlwdFwiPlxyXG4gKiBATmdNb2R1bGUoe1xyXG4gKiAgaW1wb3J0czogW1xyXG4gKiAgIFJvdXRlck1vZHVsZS5mb3JSb290KFNPTUVfUk9VVEVTKSxcclxuICogICBVcGdyYWRlTW9kdWxlXHJcbiAqIF0sXHJcbiAqIHByb3ZpZGVyczogW1xyXG4gKiAgIFJvdXRlclVwZ3JhZGVJbml0aWFsaXplclxyXG4gKiBdXHJcbiAqIH0pXHJcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge1xyXG4gKiAgIG5nRG9Cb290c3RyYXAoKSB7fVxyXG4gKiB9XHJcbiAqIDwvY29kZS1leGFtcGxlPlxyXG4gKlxyXG4gKiBAcHVibGljQXBpXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBSb3V0ZXJVcGdyYWRlSW5pdGlhbGl6ZXI6IHtcclxuICAgIHByb3ZpZGU6IEluamVjdGlvblRva2VuPCgoY29tcFJlZjogQ29tcG9uZW50UmVmPGFueT4pID0+IHZvaWQpW10+O1xyXG4gICAgbXVsdGk6IGJvb2xlYW47XHJcbiAgICB1c2VGYWN0b3J5OiAobmdVcGdyYWRlOiBVcGdyYWRlTW9kdWxlKSA9PiAoKSA9PiB2b2lkO1xyXG4gICAgZGVwczogKHR5cGVvZiBVcGdyYWRlTW9kdWxlKVtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNldHMgdXAgYSBsb2NhdGlvbiBjaGFuZ2UgbGlzdGVuZXIgdG8gdHJpZ2dlciBgaGlzdG9yeS5wdXNoU3RhdGVgLlxyXG4gKiBXb3JrcyBhcm91bmQgdGhlIHByb2JsZW0gdGhhdCBgb25Qb3BTdGF0ZWAgZG9lcyBub3QgdHJpZ2dlciBgaGlzdG9yeS5wdXNoU3RhdGVgLlxyXG4gKiBNdXN0IGJlIGNhbGxlZCAqYWZ0ZXIqIGNhbGxpbmcgYFVwZ3JhZGVNb2R1bGUuYm9vdHN0cmFwYC5cclxuICpcclxuICogQHBhcmFtIG5nVXBncmFkZSBUaGUgdXBncmFkZSBOZ01vZHVsZS5cclxuICogQHBhcmFtIHVybFR5cGUgVGhlIGxvY2F0aW9uIHN0cmF0ZWd5LlxyXG4gKiBAc2VlIGBIYXNoTG9jYXRpb25TdHJhdGVneWBcclxuICogQHNlZSBgUGF0aExvY2F0aW9uU3RyYXRlZ3lgXHJcbiAqXHJcbiAqIEBwdWJsaWNBcGlcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHNldFVwTG9jYXRpb25TeW5jKG5nVXBncmFkZTogVXBncmFkZU1vZHVsZSwgdXJsVHlwZT86ICdwYXRoJyB8ICdoYXNoJyk6IHZvaWQ7XHJcblxyXG5leHBvcnQgeyB9XHJcbiJdfQ==
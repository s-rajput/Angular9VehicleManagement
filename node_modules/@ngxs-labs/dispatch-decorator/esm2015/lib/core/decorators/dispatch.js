/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getNgZone } from '../internals/static-injector';
import { ActionCompleter } from '../internals/action-completer';
import { distributeActions } from '../internals/distribute-actions';
/**
 * @param {?=} descriptor
 * @return {?}
 */
function isMethodDecorator(descriptor) {
    return !!descriptor && typeof descriptor.value === 'function';
}
/**
 * @param {?=} options
 * @return {?}
 */
export function Dispatch(options = { cancelUncompleted: false }) {
    return (/**
     * @param {?} target
     * @param {?} propertyKey
     * @param {?=} descriptor
     * @return {?}
     */
    (target, propertyKey, descriptor) => {
        /** @type {?} */
        let originalValue = (/** @type {?} */ (null));
        /** @type {?} */
        const actionCompleter = ActionCompleter.create((/** @type {?} */ (options.cancelUncompleted)));
        /**
         * @this {?}
         * @return {?}
         */
        function wrapped() {
            // Every time the function is invoked we have to generate event
            // to cancel previously uncompleted asynchronous job
            if (actionCompleter !== null) {
                actionCompleter.cancelPreviousAction();
            }
            /** @type {?} */
            const ngZone = getNgZone();
            /** @type {?} */
            const wrapped = originalValue.apply(this, arguments);
            return ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => distributeActions(wrapped, actionCompleter)));
        }
        if (isMethodDecorator(descriptor)) {
            originalValue = (/** @type {?} */ (descriptor.value));
            descriptor.value = wrapped;
        }
        else {
            Object.defineProperty(target, propertyKey, {
                set: (/**
                 * @param {?} value
                 * @return {?}
                 */
                value => (originalValue = value)),
                get: (/**
                 * @return {?}
                 */
                () => wrapped)
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy1sYWJzL2Rpc3BhdGNoLWRlY29yYXRvci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2RlY29yYXRvcnMvZGlzcGF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7O0FBRXBFLFNBQVMsaUJBQWlCLENBQUMsVUFBZ0I7SUFDekMsT0FBTyxDQUFDLENBQUMsVUFBVSxJQUFJLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDaEUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUN0QixVQUEyQixFQUFFLGlCQUFpQixFQUFFLEtBQUssRUFBRTtJQUV2RDs7Ozs7O0lBQU8sQ0FDTCxNQUFXLEVBQ1gsV0FBNEIsRUFDNUIsVUFBOEMsRUFDOUMsRUFBRTs7WUFDRSxhQUFhLEdBQWEsbUJBQUEsSUFBSSxFQUFDOztjQUU3QixlQUFlLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxPQUFPLENBQUMsaUJBQWlCLEVBQUMsQ0FBQzs7Ozs7UUFFMUUsU0FBUyxPQUFPO1lBQ2QsK0RBQStEO1lBQy9ELG9EQUFvRDtZQUNwRCxJQUFJLGVBQWUsS0FBSyxJQUFJLEVBQUU7Z0JBQzVCLGVBQWUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO2FBQ3hDOztrQkFFSyxNQUFNLEdBQUcsU0FBUyxFQUFFOztrQkFDcEIsT0FBTyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztZQUNwRCxPQUFPLE1BQU0sQ0FBQyxpQkFBaUI7OztZQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsRUFBQyxDQUFDO1FBQ3JGLENBQUM7UUFFRCxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pDLGFBQWEsR0FBRyxtQkFBQSxVQUFVLENBQUMsS0FBSyxFQUFDLENBQUM7WUFDbEMsVUFBVSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7U0FDNUI7YUFBTTtZQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRTtnQkFDekMsR0FBRzs7OztnQkFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFBO2dCQUNyQyxHQUFHOzs7Z0JBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFBO2FBQ25CLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3BhdGNoT3B0aW9ucyB9IGZyb20gJy4uL2ludGVybmFscy9pbnRlcm5hbHMnO1xuaW1wb3J0IHsgZ2V0Tmdab25lIH0gZnJvbSAnLi4vaW50ZXJuYWxzL3N0YXRpYy1pbmplY3Rvcic7XG5pbXBvcnQgeyBBY3Rpb25Db21wbGV0ZXIgfSBmcm9tICcuLi9pbnRlcm5hbHMvYWN0aW9uLWNvbXBsZXRlcic7XG5pbXBvcnQgeyBkaXN0cmlidXRlQWN0aW9ucyB9IGZyb20gJy4uL2ludGVybmFscy9kaXN0cmlidXRlLWFjdGlvbnMnO1xuXG5mdW5jdGlvbiBpc01ldGhvZERlY29yYXRvcihkZXNjcmlwdG9yPzogYW55KTogZGVzY3JpcHRvciBpcyBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxGdW5jdGlvbj4ge1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIHR5cGVvZiBkZXNjcmlwdG9yLnZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRGlzcGF0Y2goXG4gIG9wdGlvbnM6IERpc3BhdGNoT3B0aW9ucyA9IHsgY2FuY2VsVW5jb21wbGV0ZWQ6IGZhbHNlIH1cbik6IFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgcmV0dXJuIChcbiAgICB0YXJnZXQ6IGFueSxcbiAgICBwcm9wZXJ0eUtleTogc3RyaW5nIHwgc3ltYm9sLFxuICAgIGRlc2NyaXB0b3I/OiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxGdW5jdGlvbj5cbiAgKSA9PiB7XG4gICAgbGV0IG9yaWdpbmFsVmFsdWU6IEZ1bmN0aW9uID0gbnVsbCE7XG5cbiAgICBjb25zdCBhY3Rpb25Db21wbGV0ZXIgPSBBY3Rpb25Db21wbGV0ZXIuY3JlYXRlKG9wdGlvbnMuY2FuY2VsVW5jb21wbGV0ZWQhKTtcblxuICAgIGZ1bmN0aW9uIHdyYXBwZWQodGhpczogYW55KSB7XG4gICAgICAvLyBFdmVyeSB0aW1lIHRoZSBmdW5jdGlvbiBpcyBpbnZva2VkIHdlIGhhdmUgdG8gZ2VuZXJhdGUgZXZlbnRcbiAgICAgIC8vIHRvIGNhbmNlbCBwcmV2aW91c2x5IHVuY29tcGxldGVkIGFzeW5jaHJvbm91cyBqb2JcbiAgICAgIGlmIChhY3Rpb25Db21wbGV0ZXIgIT09IG51bGwpIHtcbiAgICAgICAgYWN0aW9uQ29tcGxldGVyLmNhbmNlbFByZXZpb3VzQWN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5nWm9uZSA9IGdldE5nWm9uZSgpO1xuICAgICAgY29uc3Qgd3JhcHBlZCA9IG9yaWdpbmFsVmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZGlzdHJpYnV0ZUFjdGlvbnMod3JhcHBlZCwgYWN0aW9uQ29tcGxldGVyKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTWV0aG9kRGVjb3JhdG9yKGRlc2NyaXB0b3IpKSB7XG4gICAgICBvcmlnaW5hbFZhbHVlID0gZGVzY3JpcHRvci52YWx1ZSE7XG4gICAgICBkZXNjcmlwdG9yLnZhbHVlID0gd3JhcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIHtcbiAgICAgICAgc2V0OiB2YWx1ZSA9PiAob3JpZ2luYWxWYWx1ZSA9IHZhbHVlKSxcbiAgICAgICAgZ2V0OiAoKSA9PiB3cmFwcGVkXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG4iXX0=
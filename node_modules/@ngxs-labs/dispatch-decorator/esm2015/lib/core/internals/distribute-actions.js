/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ÉµisPromise as isPromise } from '@angular/core';
import { isObservable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getStore, getNgZone } from './static-injector';
/**
 * @param {?} actionOrActions
 * @return {?}
 */
function dispatchFactory(actionOrActions) {
    /** @type {?} */
    const store = getStore();
    /** @type {?} */
    const ngZone = getNgZone();
    ngZone.run((/**
     * @return {?}
     */
    () => store.dispatch(actionOrActions)));
}
/**
 * @param {?} wrapped
 * @param {?} actionCompleter
 * @return {?}
 */
function unwrapObservable(wrapped, actionCompleter) {
    // If it is not nully then it means `cancelUncompleted` is truthy
    if (actionCompleter !== null) {
        wrapped = wrapped.pipe(takeUntil(actionCompleter.cancelUncompleted$));
    }
    wrapped.subscribe({
        next: (/**
         * @param {?} actionOrActions
         * @return {?}
         */
        actionOrActions => dispatchFactory(actionOrActions))
    });
    return wrapped;
}
/**
 * @param {?} wrapped
 * @return {?}
 * @this {*}
 */
function unwrapPromise(wrapped) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        /** @type {?} */
        const actionOrActions = yield wrapped;
        dispatchFactory(actionOrActions);
        return actionOrActions;
    });
}
/**
 * As dispatchers can have different return types, they can be either
 * synchronous or asynchronous, we have to determine its return type
 * and unwrap `Promise` or `Observable`
 * @param {?} wrapped
 * @param {?} actionCompleter
 * @return {?}
 */
export function distributeActions(wrapped, actionCompleter) {
    if (isObservable(wrapped)) {
        return unwrapObservable(wrapped, actionCompleter);
    }
    if (isPromise(wrapped)) {
        return unwrapPromise(wrapped);
    }
    dispatchFactory(wrapped);
    return wrapped;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzdHJpYnV0ZS1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMtbGFicy9kaXNwYXRjaC1kZWNvcmF0b3IvIiwic291cmNlcyI6WyJsaWIvY29yZS9pbnRlcm5hbHMvZGlzdHJpYnV0ZS1hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7QUFFeEQsU0FBUyxlQUFlLENBQUMsZUFBZ0M7O1VBQ2pELEtBQUssR0FBRyxRQUFRLEVBQUU7O1VBQ2xCLE1BQU0sR0FBRyxTQUFTLEVBQUU7SUFDMUIsTUFBTSxDQUFDLEdBQUc7OztJQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUMsQ0FBQztBQUNwRCxDQUFDOzs7Ozs7QUFFRCxTQUFTLGdCQUFnQixDQUN2QixPQUFvQyxFQUNwQyxlQUF1QztJQUV2QyxpRUFBaUU7SUFDakUsSUFBSSxlQUFlLEtBQUssSUFBSSxFQUFFO1FBQzVCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0tBQ3ZFO0lBRUQsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNoQixJQUFJOzs7O1FBQUUsZUFBZSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLENBQUE7S0FDMUQsQ0FBQyxDQUFDO0lBRUgsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQzs7Ozs7O0FBRUQsU0FBZSxhQUFhLENBQUMsT0FBaUM7OztjQUN0RCxlQUFlLEdBQUcsTUFBTSxPQUFPO1FBQ3JDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNqQyxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDO0NBQUE7Ozs7Ozs7OztBQU9ELE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxPQUFnQixFQUFFLGVBQXVDO0lBQ3pGLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3pCLE9BQU8sZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0tBQ25EO0lBRUQsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDL0I7SUFFRCxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IMm1aXNQcm9taXNlIGFzIGlzUHJvbWlzZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IEFjdGlvbkNvbXBsZXRlciB9IGZyb20gJy4vYWN0aW9uLWNvbXBsZXRlcic7XG5pbXBvcnQgeyBXcmFwcGVkLCBBY3Rpb25PckFjdGlvbnMgfSBmcm9tICcuL2ludGVybmFscyc7XG5pbXBvcnQgeyBnZXRTdG9yZSwgZ2V0Tmdab25lIH0gZnJvbSAnLi9zdGF0aWMtaW5qZWN0b3InO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEZhY3RvcnkoYWN0aW9uT3JBY3Rpb25zOiBBY3Rpb25PckFjdGlvbnMpOiB2b2lkIHtcbiAgY29uc3Qgc3RvcmUgPSBnZXRTdG9yZSgpO1xuICBjb25zdCBuZ1pvbmUgPSBnZXROZ1pvbmUoKTtcbiAgbmdab25lLnJ1bigoKSA9PiBzdG9yZS5kaXNwYXRjaChhY3Rpb25PckFjdGlvbnMpKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwT2JzZXJ2YWJsZShcbiAgd3JhcHBlZDogT2JzZXJ2YWJsZTxBY3Rpb25PckFjdGlvbnM+LFxuICBhY3Rpb25Db21wbGV0ZXI6IEFjdGlvbkNvbXBsZXRlciB8IG51bGxcbik6IE9ic2VydmFibGU8QWN0aW9uT3JBY3Rpb25zPiB7XG4gIC8vIElmIGl0IGlzIG5vdCBudWxseSB0aGVuIGl0IG1lYW5zIGBjYW5jZWxVbmNvbXBsZXRlZGAgaXMgdHJ1dGh5XG4gIGlmIChhY3Rpb25Db21wbGV0ZXIgIT09IG51bGwpIHtcbiAgICB3cmFwcGVkID0gd3JhcHBlZC5waXBlKHRha2VVbnRpbChhY3Rpb25Db21wbGV0ZXIuY2FuY2VsVW5jb21wbGV0ZWQkKSk7XG4gIH1cblxuICB3cmFwcGVkLnN1YnNjcmliZSh7XG4gICAgbmV4dDogYWN0aW9uT3JBY3Rpb25zID0+IGRpc3BhdGNoRmFjdG9yeShhY3Rpb25PckFjdGlvbnMpXG4gIH0pO1xuXG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1bndyYXBQcm9taXNlKHdyYXBwZWQ6IFByb21pc2U8QWN0aW9uT3JBY3Rpb25zPik6IFByb21pc2U8QWN0aW9uT3JBY3Rpb25zPiB7XG4gIGNvbnN0IGFjdGlvbk9yQWN0aW9ucyA9IGF3YWl0IHdyYXBwZWQ7XG4gIGRpc3BhdGNoRmFjdG9yeShhY3Rpb25PckFjdGlvbnMpO1xuICByZXR1cm4gYWN0aW9uT3JBY3Rpb25zO1xufVxuXG4vKipcbiAqIEFzIGRpc3BhdGNoZXJzIGNhbiBoYXZlIGRpZmZlcmVudCByZXR1cm4gdHlwZXMsIHRoZXkgY2FuIGJlIGVpdGhlclxuICogc3luY2hyb25vdXMgb3IgYXN5bmNocm9ub3VzLCB3ZSBoYXZlIHRvIGRldGVybWluZSBpdHMgcmV0dXJuIHR5cGVcbiAqIGFuZCB1bndyYXAgYFByb21pc2VgIG9yIGBPYnNlcnZhYmxlYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdHJpYnV0ZUFjdGlvbnMod3JhcHBlZDogV3JhcHBlZCwgYWN0aW9uQ29tcGxldGVyOiBBY3Rpb25Db21wbGV0ZXIgfCBudWxsKSB7XG4gIGlmIChpc09ic2VydmFibGUod3JhcHBlZCkpIHtcbiAgICByZXR1cm4gdW53cmFwT2JzZXJ2YWJsZSh3cmFwcGVkLCBhY3Rpb25Db21wbGV0ZXIpO1xuICB9XG5cbiAgaWYgKGlzUHJvbWlzZSh3cmFwcGVkKSkge1xuICAgIHJldHVybiB1bndyYXBQcm9taXNlKHdyYXBwZWQpO1xuICB9XG5cbiAgZGlzcGF0Y2hGYWN0b3J5KHdyYXBwZWQpO1xuICByZXR1cm4gd3JhcHBlZDtcbn1cbiJdfQ==
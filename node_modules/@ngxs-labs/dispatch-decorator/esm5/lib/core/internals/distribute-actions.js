/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ÉµisPromise as isPromise } from '@angular/core';
import { isObservable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getStore, getNgZone } from './static-injector';
/**
 * @param {?} actionOrActions
 * @return {?}
 */
function dispatchFactory(actionOrActions) {
    /** @type {?} */
    var store = getStore();
    /** @type {?} */
    var ngZone = getNgZone();
    ngZone.run((/**
     * @return {?}
     */
    function () { return store.dispatch(actionOrActions); }));
}
/**
 * @param {?} wrapped
 * @param {?} actionCompleter
 * @return {?}
 */
function unwrapObservable(wrapped, actionCompleter) {
    // If it is not nully then it means `cancelUncompleted` is truthy
    if (actionCompleter !== null) {
        wrapped = wrapped.pipe(takeUntil(actionCompleter.cancelUncompleted$));
    }
    wrapped.subscribe({
        next: (/**
         * @param {?} actionOrActions
         * @return {?}
         */
        function (actionOrActions) { return dispatchFactory(actionOrActions); })
    });
    return wrapped;
}
/**
 * @param {?} wrapped
 * @return {?}
 * @this {*}
 */
function unwrapPromise(wrapped) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var actionOrActions;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, wrapped];
                case 1:
                    actionOrActions = _a.sent();
                    dispatchFactory(actionOrActions);
                    return [2 /*return*/, actionOrActions];
            }
        });
    });
}
/**
 * As dispatchers can have different return types, they can be either
 * synchronous or asynchronous, we have to determine its return type
 * and unwrap `Promise` or `Observable`
 * @param {?} wrapped
 * @param {?} actionCompleter
 * @return {?}
 */
export function distributeActions(wrapped, actionCompleter) {
    if (isObservable(wrapped)) {
        return unwrapObservable(wrapped, actionCompleter);
    }
    if (isPromise(wrapped)) {
        return unwrapPromise(wrapped);
    }
    dispatchFactory(wrapped);
    return wrapped;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzdHJpYnV0ZS1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMtbGFicy9kaXNwYXRjaC1kZWNvcmF0b3IvIiwic291cmNlcyI6WyJsaWIvY29yZS9pbnRlcm5hbHMvZGlzdHJpYnV0ZS1hY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7QUFFeEQsU0FBUyxlQUFlLENBQUMsZUFBZ0M7O1FBQ2pELEtBQUssR0FBRyxRQUFRLEVBQUU7O1FBQ2xCLE1BQU0sR0FBRyxTQUFTLEVBQUU7SUFDMUIsTUFBTSxDQUFDLEdBQUc7OztJQUFDLGNBQU0sT0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxFQUEvQixDQUErQixFQUFDLENBQUM7QUFDcEQsQ0FBQzs7Ozs7O0FBRUQsU0FBUyxnQkFBZ0IsQ0FDdkIsT0FBb0MsRUFDcEMsZUFBdUM7SUFFdkMsaUVBQWlFO0lBQ2pFLElBQUksZUFBZSxLQUFLLElBQUksRUFBRTtRQUM1QixPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztLQUN2RTtJQUVELE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDaEIsSUFBSTs7OztRQUFFLFVBQUEsZUFBZSxJQUFJLE9BQUEsZUFBZSxDQUFDLGVBQWUsQ0FBQyxFQUFoQyxDQUFnQyxDQUFBO0tBQzFELENBQUMsQ0FBQztJQUVILE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7Ozs7OztBQUVELFNBQWUsYUFBYSxDQUFDLE9BQWlDOzs7Ozt3QkFDcEMscUJBQU0sT0FBTyxFQUFBOztvQkFBL0IsZUFBZSxHQUFHLFNBQWE7b0JBQ3JDLGVBQWUsQ0FBQyxlQUFlLENBQUMsQ0FBQztvQkFDakMsc0JBQU8sZUFBZSxFQUFDOzs7O0NBQ3hCOzs7Ozs7Ozs7QUFPRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FBZ0IsRUFBRSxlQUF1QztJQUN6RixJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN6QixPQUFPLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztLQUNuRDtJQUVELElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9CO0lBRUQsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyDJtWlzUHJvbWlzZSBhcyBpc1Byb21pc2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzT2JzZXJ2YWJsZSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBBY3Rpb25Db21wbGV0ZXIgfSBmcm9tICcuL2FjdGlvbi1jb21wbGV0ZXInO1xuaW1wb3J0IHsgV3JhcHBlZCwgQWN0aW9uT3JBY3Rpb25zIH0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuaW1wb3J0IHsgZ2V0U3RvcmUsIGdldE5nWm9uZSB9IGZyb20gJy4vc3RhdGljLWluamVjdG9yJztcblxuZnVuY3Rpb24gZGlzcGF0Y2hGYWN0b3J5KGFjdGlvbk9yQWN0aW9uczogQWN0aW9uT3JBY3Rpb25zKTogdm9pZCB7XG4gIGNvbnN0IHN0b3JlID0gZ2V0U3RvcmUoKTtcbiAgY29uc3Qgbmdab25lID0gZ2V0Tmdab25lKCk7XG4gIG5nWm9uZS5ydW4oKCkgPT4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uT3JBY3Rpb25zKSk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcE9ic2VydmFibGUoXG4gIHdyYXBwZWQ6IE9ic2VydmFibGU8QWN0aW9uT3JBY3Rpb25zPixcbiAgYWN0aW9uQ29tcGxldGVyOiBBY3Rpb25Db21wbGV0ZXIgfCBudWxsXG4pOiBPYnNlcnZhYmxlPEFjdGlvbk9yQWN0aW9ucz4ge1xuICAvLyBJZiBpdCBpcyBub3QgbnVsbHkgdGhlbiBpdCBtZWFucyBgY2FuY2VsVW5jb21wbGV0ZWRgIGlzIHRydXRoeVxuICBpZiAoYWN0aW9uQ29tcGxldGVyICE9PSBudWxsKSB7XG4gICAgd3JhcHBlZCA9IHdyYXBwZWQucGlwZSh0YWtlVW50aWwoYWN0aW9uQ29tcGxldGVyLmNhbmNlbFVuY29tcGxldGVkJCkpO1xuICB9XG5cbiAgd3JhcHBlZC5zdWJzY3JpYmUoe1xuICAgIG5leHQ6IGFjdGlvbk9yQWN0aW9ucyA9PiBkaXNwYXRjaEZhY3RvcnkoYWN0aW9uT3JBY3Rpb25zKVxuICB9KTtcblxuICByZXR1cm4gd3JhcHBlZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdW53cmFwUHJvbWlzZSh3cmFwcGVkOiBQcm9taXNlPEFjdGlvbk9yQWN0aW9ucz4pOiBQcm9taXNlPEFjdGlvbk9yQWN0aW9ucz4ge1xuICBjb25zdCBhY3Rpb25PckFjdGlvbnMgPSBhd2FpdCB3cmFwcGVkO1xuICBkaXNwYXRjaEZhY3RvcnkoYWN0aW9uT3JBY3Rpb25zKTtcbiAgcmV0dXJuIGFjdGlvbk9yQWN0aW9ucztcbn1cblxuLyoqXG4gKiBBcyBkaXNwYXRjaGVycyBjYW4gaGF2ZSBkaWZmZXJlbnQgcmV0dXJuIHR5cGVzLCB0aGV5IGNhbiBiZSBlaXRoZXJcbiAqIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cywgd2UgaGF2ZSB0byBkZXRlcm1pbmUgaXRzIHJldHVybiB0eXBlXG4gKiBhbmQgdW53cmFwIGBQcm9taXNlYCBvciBgT2JzZXJ2YWJsZWBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RyaWJ1dGVBY3Rpb25zKHdyYXBwZWQ6IFdyYXBwZWQsIGFjdGlvbkNvbXBsZXRlcjogQWN0aW9uQ29tcGxldGVyIHwgbnVsbCkge1xuICBpZiAoaXNPYnNlcnZhYmxlKHdyYXBwZWQpKSB7XG4gICAgcmV0dXJuIHVud3JhcE9ic2VydmFibGUod3JhcHBlZCwgYWN0aW9uQ29tcGxldGVyKTtcbiAgfVxuXG4gIGlmIChpc1Byb21pc2Uod3JhcHBlZCkpIHtcbiAgICByZXR1cm4gdW53cmFwUHJvbWlzZSh3cmFwcGVkKTtcbiAgfVxuXG4gIGRpc3BhdGNoRmFjdG9yeSh3cmFwcGVkKTtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getNgZone } from '../internals/static-injector';
import { ActionCompleter } from '../internals/action-completer';
import { distributeActions } from '../internals/distribute-actions';
/**
 * @param {?=} descriptor
 * @return {?}
 */
function isMethodDecorator(descriptor) {
    return !!descriptor && typeof descriptor.value === 'function';
}
/**
 * @param {?=} options
 * @return {?}
 */
export function Dispatch(options) {
    if (options === void 0) { options = { cancelUncompleted: false }; }
    return (/**
     * @param {?} target
     * @param {?} propertyKey
     * @param {?=} descriptor
     * @return {?}
     */
    function (target, propertyKey, descriptor) {
        /** @type {?} */
        var originalValue = (/** @type {?} */ (null));
        /** @type {?} */
        var actionCompleter = ActionCompleter.create((/** @type {?} */ (options.cancelUncompleted)));
        /**
         * @this {?}
         * @return {?}
         */
        function wrapped() {
            // Every time the function is invoked we have to generate event
            // to cancel previously uncompleted asynchronous job
            if (actionCompleter !== null) {
                actionCompleter.cancelPreviousAction();
            }
            /** @type {?} */
            var ngZone = getNgZone();
            /** @type {?} */
            var wrapped = originalValue.apply(this, arguments);
            return ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return distributeActions(wrapped, actionCompleter); }));
        }
        if (isMethodDecorator(descriptor)) {
            originalValue = (/** @type {?} */ (descriptor.value));
            descriptor.value = wrapped;
        }
        else {
            Object.defineProperty(target, propertyKey, {
                set: (/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) { return (originalValue = value); }),
                get: (/**
                 * @return {?}
                 */
                function () { return wrapped; })
            });
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2guanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy1sYWJzL2Rpc3BhdGNoLWRlY29yYXRvci8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL2RlY29yYXRvcnMvZGlzcGF0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7Ozs7O0FBRXBFLFNBQVMsaUJBQWlCLENBQUMsVUFBZ0I7SUFDekMsT0FBTyxDQUFDLENBQUMsVUFBVSxJQUFJLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDaEUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUN0QixPQUF1RDtJQUF2RCx3QkFBQSxFQUFBLFlBQTZCLGlCQUFpQixFQUFFLEtBQUssRUFBRTtJQUV2RDs7Ozs7O0lBQU8sVUFDTCxNQUFXLEVBQ1gsV0FBNEIsRUFDNUIsVUFBOEM7O1lBRTFDLGFBQWEsR0FBYSxtQkFBQSxJQUFJLEVBQUM7O1lBRTdCLGVBQWUsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLG1CQUFBLE9BQU8sQ0FBQyxpQkFBaUIsRUFBQyxDQUFDOzs7OztRQUUxRSxTQUFTLE9BQU87WUFDZCwrREFBK0Q7WUFDL0Qsb0RBQW9EO1lBQ3BELElBQUksZUFBZSxLQUFLLElBQUksRUFBRTtnQkFDNUIsZUFBZSxDQUFDLG9CQUFvQixFQUFFLENBQUM7YUFDeEM7O2dCQUVLLE1BQU0sR0FBRyxTQUFTLEVBQUU7O2dCQUNwQixPQUFPLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDO1lBQ3BELE9BQU8sTUFBTSxDQUFDLGlCQUFpQjs7O1lBQUMsY0FBTSxPQUFBLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsRUFBM0MsQ0FBMkMsRUFBQyxDQUFDO1FBQ3JGLENBQUM7UUFFRCxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pDLGFBQWEsR0FBRyxtQkFBQSxVQUFVLENBQUMsS0FBSyxFQUFDLENBQUM7WUFDbEMsVUFBVSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7U0FDNUI7YUFBTTtZQUNMLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRTtnQkFDekMsR0FBRzs7OztnQkFBRSxVQUFBLEtBQUssSUFBSSxPQUFBLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxFQUF2QixDQUF1QixDQUFBO2dCQUNyQyxHQUFHOzs7Z0JBQUUsY0FBTSxPQUFBLE9BQU8sRUFBUCxDQUFPLENBQUE7YUFDbkIsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlzcGF0Y2hPcHRpb25zIH0gZnJvbSAnLi4vaW50ZXJuYWxzL2ludGVybmFscyc7XG5pbXBvcnQgeyBnZXROZ1pvbmUgfSBmcm9tICcuLi9pbnRlcm5hbHMvc3RhdGljLWluamVjdG9yJztcbmltcG9ydCB7IEFjdGlvbkNvbXBsZXRlciB9IGZyb20gJy4uL2ludGVybmFscy9hY3Rpb24tY29tcGxldGVyJztcbmltcG9ydCB7IGRpc3RyaWJ1dGVBY3Rpb25zIH0gZnJvbSAnLi4vaW50ZXJuYWxzL2Rpc3RyaWJ1dGUtYWN0aW9ucyc7XG5cbmZ1bmN0aW9uIGlzTWV0aG9kRGVjb3JhdG9yKGRlc2NyaXB0b3I/OiBhbnkpOiBkZXNjcmlwdG9yIGlzIFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPEZ1bmN0aW9uPiB7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEaXNwYXRjaChcbiAgb3B0aW9uczogRGlzcGF0Y2hPcHRpb25zID0geyBjYW5jZWxVbmNvbXBsZXRlZDogZmFsc2UgfVxuKTogUHJvcGVydHlEZWNvcmF0b3Ige1xuICByZXR1cm4gKFxuICAgIHRhcmdldDogYW55LFxuICAgIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wsXG4gICAgZGVzY3JpcHRvcj86IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPEZ1bmN0aW9uPlxuICApID0+IHtcbiAgICBsZXQgb3JpZ2luYWxWYWx1ZTogRnVuY3Rpb24gPSBudWxsITtcblxuICAgIGNvbnN0IGFjdGlvbkNvbXBsZXRlciA9IEFjdGlvbkNvbXBsZXRlci5jcmVhdGUob3B0aW9ucy5jYW5jZWxVbmNvbXBsZXRlZCEpO1xuXG4gICAgZnVuY3Rpb24gd3JhcHBlZCh0aGlzOiBhbnkpIHtcbiAgICAgIC8vIEV2ZXJ5IHRpbWUgdGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgd2UgaGF2ZSB0byBnZW5lcmF0ZSBldmVudFxuICAgICAgLy8gdG8gY2FuY2VsIHByZXZpb3VzbHkgdW5jb21wbGV0ZWQgYXN5bmNocm9ub3VzIGpvYlxuICAgICAgaWYgKGFjdGlvbkNvbXBsZXRlciAhPT0gbnVsbCkge1xuICAgICAgICBhY3Rpb25Db21wbGV0ZXIuY2FuY2VsUHJldmlvdXNBY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbmdab25lID0gZ2V0Tmdab25lKCk7XG4gICAgICBjb25zdCB3cmFwcGVkID0gb3JpZ2luYWxWYWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBkaXN0cmlidXRlQWN0aW9ucyh3cmFwcGVkLCBhY3Rpb25Db21wbGV0ZXIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNNZXRob2REZWNvcmF0b3IoZGVzY3JpcHRvcikpIHtcbiAgICAgIG9yaWdpbmFsVmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlITtcbiAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSB3cmFwcGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwge1xuICAgICAgICBzZXQ6IHZhbHVlID0+IChvcmlnaW5hbFZhbHVlID0gdmFsdWUpLFxuICAgICAgICBnZXQ6ICgpID0+IHdyYXBwZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==
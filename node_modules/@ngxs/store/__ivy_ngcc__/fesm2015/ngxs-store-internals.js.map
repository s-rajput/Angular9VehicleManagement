{"version":3,"file":"ngxs-store-internals.js","sources":["ng:/@ngxs/store/internals/memoize.ts","ng:/@ngxs/store/internals/angular.ts","ng:/@ngxs/store/internals/ngxs-bootstrapper.ts","ng:/@ngxs/store/internals/initial-state.ts","ng:/@ngxs/store/internals/internal-tokens.ts"],"names":[],"mappings":"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","sourcesContent":["function defaultEqualityCheck(a: any, b: any) {\r\n  return a === b;\r\n}\r\n\r\nfunction areArgumentsShallowlyEqual(\r\n  equalityCheck: (a: any, b: any) => boolean,\r\n  prev: IArguments | null,\r\n  next: IArguments | null\r\n) {\r\n  if (prev === null || next === null || prev.length !== next.length) {\r\n    return false;\r\n  }\r\n\r\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\r\n  const length = prev.length;\r\n  for (let i = 0; i < length; i++) {\r\n    if (!equalityCheck(prev[i], next[i])) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Memoize a function on its last inputs only.\r\n * Originally from: https://github.com/reduxjs/reselect/blob/master/src/index.js\r\n *\r\n * @ignore\r\n */\r\nexport function memoize<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  equalityCheck = defaultEqualityCheck\r\n): T {\r\n  let lastArgs: IArguments | null = null;\r\n  let lastResult: any = null;\r\n  // we reference arguments instead of spreading them for performance reasons\r\n  function memoized() {\r\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\r\n      // apply arguments instead of spreading for performance.\r\n      lastResult = (<Function>func).apply(null, arguments);\r\n    }\r\n\r\n    lastArgs = arguments;\r\n    return lastResult;\r\n  }\r\n  (<any>memoized).reset = function() {\r\n    // The hidden (for now) ability to reset the memoization\r\n    lastArgs = null;\r\n    lastResult = null;\r\n  };\r\n  return memoized as T;\r\n}\r\n","import { getPlatform, COMPILER_OPTIONS, CompilerOptions, PlatformRef } from '@angular/core';\r\nimport { memoize } from './memoize';\r\n\r\nfunction _isAngularInTestMode() {\r\n  const platformRef: PlatformRef | null = getPlatform();\r\n  if (!platformRef) return false;\r\n  const compilerOptions = platformRef.injector.get<any>(COMPILER_OPTIONS, null);\r\n  if (!compilerOptions) return false;\r\n  const isInTestMode = compilerOptions.some((item: CompilerOptions) => {\r\n    const providers = (item && item.providers) || [];\r\n    return providers.some((provider: any) => {\r\n      return (\r\n        (provider && provider.provide && provider.provide.name === 'MockNgModuleResolver') ||\r\n        false\r\n      );\r\n    });\r\n  });\r\n  return isInTestMode;\r\n}\r\n\r\nexport const isAngularInTestMode = memoize(_isAngularInTestMode);\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxsBootstrapper {\r\n  /**\r\n   * Use `ReplaySubject`, thus we can get cached value even if the stream is completed\r\n   */\r\n  private bootstrap$ = new ReplaySubject<boolean>(1);\r\n\r\n  get appBootstrapped$(): Observable<boolean> {\r\n    return this.bootstrap$.asObservable();\r\n  }\r\n\r\n  /**\r\n   * This event will be emitted after attaching `ComponentRef` of the root component\r\n   * to the tree of views, that's a signal that application has been fully rendered\r\n   */\r\n  bootstrap(): void {\r\n    this.bootstrap$.next(true);\r\n    this.bootstrap$.complete();\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\nimport { PlainObject } from './symbols';\r\n\r\nexport const INITIAL_STATE_TOKEN = new InjectionToken<any>('INITIAL_STATE_TOKEN');\r\n\r\nexport class InitialState {\r\n  private static value: PlainObject = {};\r\n\r\n  public static set(state: PlainObject) {\r\n    this.value = state;\r\n  }\r\n\r\n  public static pop(): PlainObject {\r\n    const state: PlainObject = this.value;\r\n    this.value = {};\r\n    return state;\r\n  }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/**\r\n * @see StateContextFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_CONTEXT_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateContextFactory'\r\n);\r\n\r\n/**\r\n * @see StateFactory as it's referenced by this token to be accessed by plugins internally\r\n */\r\nexport const NGXS_STATE_FACTORY: InjectionToken<any> = new InjectionToken(\r\n  'Internals.StateFactory'\r\n);\r\n"]}
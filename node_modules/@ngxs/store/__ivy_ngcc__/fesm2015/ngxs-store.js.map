{"version":3,"file":"ngxs-store.js","sources":["ng:/@ngxs/store/src/configs/messages.config.ts","ng:/@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/symbols.ts","ng:/@ngxs/store/src/execution/symbols.ts","ng:/@ngxs/store/src/utils/utils.ts","ng:/@ngxs/store/src/internal/internals.ts","ng:/@ngxs/store/src/operators/of-action.ts","ng:/@ngxs/store/src/operators/leave-ngxs.ts","ng:/@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/actions-stream.ts","ng:/@ngxs/store/src/utils/compose.ts","ng:/@ngxs/store/src/internal/state-stream.ts","ng:/@ngxs/store/src/plugin-manager.ts","ng:/@ngxs/store/src/internal/dispatcher.ts","ng:/@ngxs/store/src/utils/freeze.ts","ng:/@ngxs/store/src/host-environment/host-environment.ts","ng:/@ngxs/store/src/internal/config-validator.ts","ng:/@ngxs/store/src/internal/state-operations.ts","ng:/@ngxs/store/src/internal/state-operators.ts","ng:/@ngxs/store/src/internal/state-context-factory.ts","ng:/@ngxs/store/src/utils/store-validators.ts","ng:/@ngxs/store/src/internal/state-factory.ts","ng:/@ngxs/store/src/internal/lifecycle-state-manager.ts","ng:/@ngxs/store/src/utils/selector-utils.ts","ng:/@ngxs/store/src/store.ts","ng:/@ngxs/store/src/decorators/select/select-factory.ts","ng:/@ngxs/store/src/actions/actions.ts","ng:/@ngxs/store/src/ivy/ivy-enabled-in-dev-mode.ts","ng:/@ngxs/store/src/modules/ngxs-root.module.ts","ng:/@ngxs/store/src/modules/ngxs-feature.module.ts","ng:/@ngxs/store/src/module.ts","ng:/@ngxs/store/src/decorators/action.ts","ng:/@ngxs/store/src/ivy/ensure-state-class-is-injectable.ts","ng:/@ngxs/store/src/decorators/state.ts","ng:/@ngxs/store/src/decorators/select/symbols.ts","ng:/@ngxs/store/src/decorators/select/select.ts","ng:/@ngxs/store/src/decorators/selector-options.ts","ng:/@ngxs/store/src/public_to_deprecate.ts","ng:/@ngxs/store/src/decorators/selector/selector.ts","ng:/@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng:/@ngxs/store/src/state-token/state-token.ts"],"names":["MESSAGES","CODE","MetaDataModel","SelectorMetaDataModel","ensureStoreMetadata","ensureStoreMetadataInternal","getStoreMetadata","getStoreMetadataInternal","ensureSelectorMetadata","ensureSelectorMetadataInternal","getSelectorMetadata","getSelectorMetadataInternal"],"mappings":"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","sourcesContent":["export enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR',\r\n  ZONE_WARNING = 'ZONE_WARNING',\r\n  PATCHING_ARRAY = 'PATCHING_ARRAY',\r\n  PATCHING_PRIMITIVE = 'PATCHING_PRIMITIVE',\r\n  UNDECORATED_STATE_IN_IVY = 'UNDECORATED_STATE_IN_IVY'\r\n}\r\n\r\nexport const CONFIG_MESSAGES = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'You have forgotten to import the NGXS module!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods',\r\n  [VALIDATION_CODE.ZONE_WARNING]: () =>\r\n    'Your application was bootstrapped with nooped zone and your execution strategy requires an actual NgZone!\\n' +\r\n    'Please set the value of the executionStrategy property to NoopNgxsExecutionStrategy.\\n' +\r\n    'NgxsModule.forRoot(states, { executionStrategy: NoopNgxsExecutionStrategy })',\r\n  [VALIDATION_CODE.PATCHING_ARRAY]: () => 'Patching arrays is not supported.',\r\n  [VALIDATION_CODE.PATCHING_PRIMITIVE]: () => 'Patching primitives is not supported.',\r\n  [VALIDATION_CODE.UNDECORATED_STATE_IN_IVY]: (name: string) =>\r\n    `'${name}' class should be decorated with @Injectable() right after the @State() decorator`\r\n};\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(ngZone: NgZone): void {\r\n    // `NoopNgZone` is not exposed publicly as it doesn't expect\r\n    // to be used outside of the core Angular code, thus we just have\r\n    // to check if the zone doesn't extend or instanceof `NgZone`\r\n    if (ngZone instanceof NgZone) {\r\n      return;\r\n    }\r\n\r\n    console.warn(CONFIG_MESSAGES[VALIDATION_CODE.ZONE_WARNING]());\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { PlainObject, StateClass } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions, Callback } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { StateToken } from './state-token/state-token';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken<Callback<boolean>>('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken<Callback<boolean>>('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnChanges> &\r\n  Partial<NgxsOnInit> &\r\n  Partial<NgxsAfterBootstrap>;\r\n\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will circumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: PlainObject = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string | StateToken<T>;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: StateClass[];\r\n}\r\n\r\n/**\r\n * Represents a basic change from a previous to a new value for a single state instance.\r\n * Passed as a value in a NgxsSimpleChanges object to the ngxsOnChanges hook.\r\n */\r\nexport class NgxsSimpleChange<T = any> {\r\n  constructor(\r\n    public readonly previousValue: T,\r\n    public readonly currentValue: T,\r\n    public readonly firstChange: boolean\r\n  ) {}\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * On change interface\r\n */\r\nexport interface NgxsOnChanges {\r\n  ngxsOnChanges(change: NgxsSimpleChange): void;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n","import { PlainObjectOf, StateClass } from '@ngxs/store/internals';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  NgxsSimpleChange,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\nimport { getValue } from '../utils/utils';\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = PlainObjectOf<string[]>;\r\nexport type StatesByName = PlainObjectOf<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  makeRootSelector: SelectorFactory | null;\r\n  children?: StateClassInternal[];\r\n}\r\n\r\nexport interface RuntimeSelectorContext {\r\n  getStateGetter(key: any): (state: any) => any;\r\n  getSelectorOptions(localOptions?: SharedSelectorOptions): SharedSelectorOptions;\r\n}\r\n\r\nexport type SelectFromRootState = (rootState: any) => any;\r\nexport type SelectorFactory = (runtimeContext: RuntimeSelectorContext) => SelectFromRootState;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  makeRootSelector: SelectorFactory | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  isInitialised: boolean;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  path: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\nexport interface RootStateDiff<T> {\r\n  currentAppState: T;\r\n  newAppState: T;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      makeRootSelector(context: RuntimeSelectorContext) {\r\n        return context.getStateGetter(defaultMetadata.name);\r\n      },\r\n      children: []\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      makeRootSelector: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): PlainObjectOf<StateClassInternal> {\r\n  return states.reduce<PlainObjectOf<StateClassInternal>>(\r\n    (result: PlainObjectOf<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: PlainObjectOf<string> = {}\r\n): PlainObjectOf<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: PlainObjectOf<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n\r\nexport function getStateDiffChanges<T>(\r\n  mappedStore: MappedStore,\r\n  diff: RootStateDiff<T>\r\n): NgxsSimpleChange {\r\n  const previousValue: T = getValue(diff.currentAppState, mappedStore.path);\r\n  const currentValue: T = getValue(diff.newAppState, mappedStore.path);\r\n  return new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);\r\n}\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(...allowedTypes: any[]) {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator<T = any>(\r\n  allowedTypes: any[],\r\n  statuses?: ActionStatus[],\r\n  mapOperator: () => OperatorFunction<ActionContext, T> = mapAction\r\n) {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(\r\n      filterStatus(allowedMap, allowedStatusMap),\r\n      mapOperator()\r\n    );\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: any[]): FilterMap {\r\n  return types.reduce(\r\n    (filterMap: FilterMap, klass: any) => {\r\n      filterMap[getActionTypeFromInstance(klass)!] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce(\r\n    (filterMap: FilterMap, status: ActionStatus) => {\r\n      filterMap[status] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  // This has to be `Observable<ActionContext>` in the v4. Because `InternalActions`\r\n  // is a `Subject<ActionContext>`. Leave it as `any` to avoid breaking changes\r\n  constructor(\r\n    internalActions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      const childSubscription = internalActions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe({\r\n          next: ctx => observer.next(ctx),\r\n          error: error => observer.error(error),\r\n          complete: () => observer.complete()\r\n        });\r\n\r\n      observer.add(childSubscription);\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<PlainObject> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Inject, Injectable, Optional, SkipSelf } from '@angular/core';\r\nimport { NGXS_PLUGINS, NgxsPlugin, NgxsPluginFn } from './symbols';\r\n\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private get rootPlugins(): NgxsPluginFn[] {\r\n    return (this._parentManager && this._parentManager.plugins) || this.plugins;\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    const pluginHandlers: NgxsPluginFn[] = this.getPluginHandlers();\r\n    this.rootPlugins.push(...pluginHandlers);\r\n  }\r\n\r\n  private getPluginHandlers(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        (plugin.handle ? plugin.handle.bind(plugin) : plugin) as NgxsPluginFn\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => {\r\n          try {\r\n            this._errorHandler.handleError(error);\r\n          } catch {}\r\n        })\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      if (actionOrActions.length === 0) return of(this._stateStream.getValue());\r\n      return forkJoin(actionOrActions.map(action => this.dispatchSingle(action)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isDevMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isTestMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actions: any[]) => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    if (Array.isArray(val)) {\r\n      throw new Error(MESSAGES[CODE.PATCHING_ARRAY]());\r\n    } else if (typeof val !== 'object') {\r\n      throw new Error(MESSAGES[CODE.PATCHING_PRIMITIVE]());\r\n    }\r\n\r\n    const newState: any = { ...(existingState as any) };\r\n    for (const key in val) {\r\n      // deep clone for patch compatibility\r\n      // noinspection JSUnfilteredForInLoop (IDE)\r\n      newState[key] = (val as any)[key];\r\n    }\r\n\r\n    return newState as T;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext, StateOperator } from '../symbols';\r\nimport { getStateDiffChanges, MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(mappedStore: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, mappedStore.path);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, mappedStore.path, newValue);\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const change: NgxsSimpleChange = getStateDiffChanges<T>(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(change);\r\n      }\r\n\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string | null) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort,\r\n  RuntimeSelectorContext,\r\n  SharedSelectorOptions\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, PlainObjectOf, memoize } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  public get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  public get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private _statePaths: PlainObjectOf<string> = {};\r\n\r\n  private get statePaths(): PlainObjectOf<string> {\r\n    return this._parentFactory ? this._parentFactory.statePaths : this._statePaths;\r\n  }\r\n\r\n  public getRuntimeSelectorContext = memoize(() => {\r\n    const stateFactory = this;\r\n    const context: RuntimeSelectorContext = this._parentFactory\r\n      ? this._parentFactory.getRuntimeSelectorContext()\r\n      : {\r\n          getStateGetter(key: string) {\r\n            const path = stateFactory.statePaths[key];\r\n            return path ? propGetter(path.split('.'), stateFactory._config) : () => undefined;\r\n          },\r\n          getSelectorOptions(localOptions?: SharedSelectorOptions) {\r\n            const globalSelectorOptions = stateFactory._config.selectorOptions;\r\n            return {\r\n              ...globalSelectorOptions,\r\n              ...(localOptions || {})\r\n            };\r\n          }\r\n        };\r\n    return context;\r\n  });\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const paths: PlainObjectOf<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: PlainObjectOf<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const path: string = paths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, path);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        path,\r\n        isInitialised: false,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, path)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const mappedStores: MappedStore[] = this.add(classes);\r\n    const defaults = mappedStores.reduce(\r\n      (result: any, mappedStore: MappedStore) =>\r\n        setValue(result, mappedStore.path, mappedStore.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states: mappedStores };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action)!;\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, path: string): void {\r\n    this.statePaths[meta.name!] = path;\r\n    // TODO: v4 - we plan to get rid of the path property because it is non-deterministic\r\n    // we can do this when we get rid of the incorrectly exposed getStoreMetadata\r\n    // We will need to come up with an alternative in v4 because this is used by many plugins\r\n    meta.path = path;\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper, PlainObject } from '@ngxs/store/internals';\r\nimport { filter, mergeMap, tap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { getStateDiffChanges, MappedStore, StatesAndDefaults } from './internals';\r\nimport { NgxsLifeCycle, NgxsSimpleChange, StateContext } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => this.invokeBootstrap(results!.states));\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(mappedStores: MappedStore[]): void {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n\r\n      if (instance.ngxsOnChanges) {\r\n        const currentAppState: PlainObject = {};\r\n        const newAppState: PlainObject = this.internalStateOperations\r\n          .getRootStateOperations()\r\n          .getState();\r\n\r\n        const firstDiffChange: NgxsSimpleChange = getStateDiffChanges(mappedStore, {\r\n          currentAppState,\r\n          newAppState\r\n        });\r\n\r\n        instance.ngxsOnChanges(firstDiffChange);\r\n      }\r\n\r\n      if (instance.ngxsOnInit) {\r\n        instance.ngxsOnInit(this.getStateContext(mappedStore));\r\n      }\r\n\r\n      mappedStore.isInitialised = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(mappedStores: MappedStore[]) {\r\n    for (const mappedStore of mappedStores) {\r\n      const instance: NgxsLifeCycle = mappedStore.instance;\r\n      if (instance.ngxsAfterBootstrap) {\r\n        instance.ngxsAfterBootstrap(this.getStateContext(mappedStore));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getStateContext(mappedStore: MappedStore): StateContext<any> {\r\n    return this.stateContextFactory.createStateContext(mappedStore);\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions,\r\n  RuntimeSelectorContext,\r\n  SelectorFactory,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: SelectFromRootState[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  Object.setPrototypeOf(memoizedFn, originalFn);\r\n\r\n  const selectorMetaData = setupSelectorMetadata<T>(originalFn, creationMetadata);\r\n\r\n  const makeRootSelector: SelectorFactory = (context: RuntimeSelectorContext) => {\r\n    const { argumentSelectorFunctions, selectorOptions } = getRuntimeSelectorInfo(\r\n      context,\r\n      selectorMetaData,\r\n      selectors\r\n    );\r\n\r\n    return function selectFromRoot(rootState: any) {\r\n      // Determine arguments from the app state using the selectors\r\n      const results = argumentSelectorFunctions.map(argFn => argFn(rootState));\r\n\r\n      // if the lambda tries to access a something on the\r\n      // state that doesn't exist, it will throw a TypeError.\r\n      // since this is quite usual behaviour, we simply return undefined if so.\r\n      try {\r\n        return memoizedFn(...results);\r\n      } catch (ex) {\r\n        if (ex instanceof TypeError && selectorOptions.suppressErrors) {\r\n          return undefined;\r\n        }\r\n\r\n        throw ex;\r\n      }\r\n    };\r\n  };\r\n\r\n  selectorMetaData.makeRootSelector = makeRootSelector;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(originalFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getLocalSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  context: RuntimeSelectorContext,\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const localSelectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorOptions = context.getSelectorOptions(localSelectorOptions);\r\n  const selectorsToApply = getSelectorsToApply(\r\n    selectors,\r\n    selectorOptions,\r\n    selectorMetaData.containerClass\r\n  );\r\n\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => {\r\n    const factory = getRootSelectorFactory(selector);\r\n    return factory(context);\r\n  });\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getLocalSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  return {\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectors: any[] | undefined = [],\r\n  selectorOptions: SharedSelectorOptions,\r\n  containerClass: any\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorOptions.injectContainerState;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the factory function to create the selector to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getRootSelectorFactory(selector: any): SelectorFactory {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.makeRootSelector) || (() => selector);\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, PlainObject } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getRootSelectorFactory } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\nimport { StateToken } from './state-token/state-token';\r\nimport { StateFactory } from './internal/state-factory';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    private _stateFactory: StateFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select<T>(selector: StateToken<T>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce<T>(selector: StateToken<T>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot<T>(selector: StateToken<T>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = this.getStoreBoundSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private getStoreBoundSelectorFn(selector: any) {\r\n    const makeSelectorFn = getRootSelectorFactory(selector);\r\n    const runtimeContext = this._stateFactory.getRuntimeSelectorContext();\r\n    return makeSelectorFn(runtimeContext);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: PlainObject = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: PlainObject = defaultStateNotEmpty\r\n        ? { ...this._config.defaultsState, ...initialStateValue }\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n}\r\n","import { PlainObject } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: PlainObject) {}\r\n}\r\n","import { isDevMode } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\n\r\n/**\r\n * Keep it as a single `const` variable since this `ReplaySubject`\r\n * will be private and accessible only within this file.\r\n */\r\nconst _ivyEnabledInDevMode$ = new ReplaySubject<boolean>(1);\r\n\r\n/**\r\n * Ivy exposes helper functions to the global `window.ng` object.\r\n * Those functions are `getComponent, getContext,\r\n * getListeners, getViewComponent, getHostElement, getInjector,\r\n * getRootComponents, getDirectives, getDebugNode`\r\n * Previously, old view engine exposed `window.ng.coreTokens` and\r\n * `window.ng.probe` if an application was in development/production.\r\n * Ivy doesn't expose these functions in production. Developers will be able\r\n * to see warnings in both JIT/AOT modes, but only if an application\r\n * is in development.\r\n */\r\nexport function setIvyEnabledInDevMode(): void {\r\n  try {\r\n    // `try-catch` will also handle server-side rendering, as\r\n    // `window is not defined` will not be thrown.\r\n    const ng = (window as any).ng;\r\n    const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;\r\n    const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();\r\n    _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);\r\n  } catch {\r\n    _ivyEnabledInDevMode$.next(false);\r\n  } finally {\r\n    _ivyEnabledInDevMode$.complete();\r\n  }\r\n}\r\n\r\nexport function ivyEnabledInDevMode(): Observable<boolean> {\r\n  return _ivyEnabledInDevMode$.asObservable();\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { ROOT_STATE_TOKEN } from '../symbols';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\nimport { setIvyEnabledInDevMode } from '../ivy/ivy-enabled-in-dev-mode';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Validate states on having the `@Injectable()` decorator in Ivy\r\n    setIvyEnabledInDevMode();\r\n\r\n    // Add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // Connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // Dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport {\r\n  INITIAL_STATE_TOKEN,\r\n  InitialState,\r\n  isAngularInTestMode,\r\n  NGXS_STATE_CONTEXT_FACTORY,\r\n  NGXS_STATE_FACTORY,\r\n  NgxsBootstrapper,\r\n  StateClass\r\n} from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_DEV_MODE,\r\n  NG_TEST_MODE,\r\n  NgxsConfig,\r\n  NgxsModuleOptions,\r\n  ROOT_STATE_TOKEN\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders<NgxsRootModule> {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders<NgxsFeatureModule> {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useValue: isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useValue: isDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      },\r\n      {\r\n        provide: NGXS_STATE_CONTEXT_FACTORY,\r\n        useExisting: StateContextFactory\r\n      },\r\n      {\r\n        provide: NGXS_STATE_FACTORY,\r\n        useExisting: StateFactory\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return Object.assign(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { ivyEnabledInDevMode } from './ivy-enabled-in-dev-mode';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * All provided or injected tokens must have `@Injectable` decorator\r\n * (previously, injected tokens without `@Injectable` were allowed\r\n * if another decorator was used, e.g. pipes).\r\n */\r\nexport function ensureStateClassIsInjectable(target: any): void {\r\n  // `Éµprov` is a static property added by the NGCC compiler. It always exists in\r\n  // AOT mode because this property is added before runtime. If an application is running in\r\n  // JIT mode then this property can be added by the `@Injectable()` decorator. The `@Injectable()`\r\n  // decorator has to go after the `@State()` decorator, thus we prevent users from unwanted DI errors.\r\n  ivyEnabledInDevMode().subscribe(_ivyEnabledInDevMode => {\r\n    if (_ivyEnabledInDevMode) {\r\n      const ngInjectableDef = target.Éµprov;\r\n      if (!ngInjectableDef) {\r\n        // Don't warn if Ivy is disabled or `Éµprov` exists on the class\r\n        console.warn(CONFIG_MESSAGES[VALIDATION_CODE.UNDECORATED_STATE_IN_IVY](target.name));\r\n      }\r\n    }\r\n  });\r\n}\r\n","import { StateClass } from '@ngxs/store/internals';\r\n\r\nimport { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { ensureStateClassIsInjectable } from '../ivy/ensure-state-class-is-injectable';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    const stateName: string | null =\r\n      typeof name === 'string' ? name : (name && name.getName()) || null;\r\n    StoreValidators.checkCorrectStateName(stateName);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = stateName;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    ensureStateClassIsInjectable(target);\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { StateToken } from '../../state-token/state-token';\r\nimport { ExtractTokenType } from '../../state-token/symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n\r\nexport type PropertyType<T> = T extends StateToken<any>\r\n  ? Observable<ExtractTokenType<T>>\r\n  : T extends (...args: any[]) => any\r\n  ? Observable<ReturnType<T>>\r\n  : any;\r\n\r\nexport type ComponentClass<T> = {\r\n  [P in keyof T]: T[P];\r\n};\r\n\r\nexport type SelectType<T> = <\r\n  U extends ComponentClass<any> & Record<K, PropertyType<T>>,\r\n  K extends string\r\n>(\r\n  target: U,\r\n  key: K\r\n) => void;\r\n","import {\r\n  ComponentClass,\r\n  createSelectObservable,\r\n  createSelectorFn,\r\n  PropertyType,\r\n  SelectType\r\n} from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select<T>(rawSelector?: T, ...paths: string[]): SelectType<T> {\r\n  return function<\r\n    U extends ComponentClass<any> & Record<K, PropertyType<T>>,\r\n    K extends string\r\n  >(target: U, key: K): void {\r\n    const name: string = key.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): PropertyType<T> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import {\r\n  getSelectorMetadata as getSelectorMetadataInternal,\r\n  getStoreMetadata as getStoreMetadataInternal,\r\n  ensureStoreMetadata as ensureStoreMetadataInternal,\r\n  ensureSelectorMetadata as ensureSelectorMetadataInternal,\r\n  StateClassInternal,\r\n  SharedSelectorOptions\r\n} from './internal/internals';\r\nimport { PlainObjectOf } from '../internals/src/symbols';\r\nimport { ActionHandlerMetaData } from './actions/symbols';\r\n\r\ninterface MetaDataModel {\r\n  name: string | null;\r\n  actions: PlainObjectOf<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  children?: StateClassInternal[];\r\n}\r\n\r\ninterface SelectorMetaDataModel {\r\n  // selectFromAppState: SelectFromState | null;\r\n  // makeRootSelector: SelectorFactory | null; // Don't expose new stuff\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport function ensureStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return ensureStoreMetadataInternal(target);\r\n}\r\n\r\nexport function getStoreMetadata(target: StateClassInternal<any, any>): MetaDataModel {\r\n  return getStoreMetadataInternal(target);\r\n}\r\n\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  return ensureSelectorMetadataInternal(target);\r\n}\r\n\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return getSelectorMetadataInternal(target);\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { createSelector } from '../../utils/selector-utils';\r\nimport { SelectorSpec, SelectorType } from './symbols';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector<T>(selectors?: T[]): SelectorType<T> {\r\n  return <U>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<SelectorSpec<T, U>>\r\n  ): TypedPropertyDescriptor<SelectorSpec<T, U>> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    const memoizedFn = createSelector(selectors, originalFn as any, {\r\n      containerClass: target,\r\n      selectorName: key.toString(),\r\n      getSelectorOptions() {\r\n        return {};\r\n      }\r\n    });\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { TokenName } from './symbols';\r\nimport {\r\n  ensureSelectorMetadata,\r\n  RuntimeSelectorContext,\r\n  SelectFromRootState\r\n} from '../internal/internals';\r\n\r\nexport class StateToken<T = void> {\r\n  constructor(private readonly name: TokenName<T>) {\r\n    const selectorMetadata = ensureSelectorMetadata(<any>this);\r\n    selectorMetadata.makeRootSelector = (\r\n      runtimeContext: RuntimeSelectorContext\r\n    ): SelectFromRootState => {\r\n      return runtimeContext.getStateGetter(this.name);\r\n    };\r\n  }\r\n\r\n  getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  toString(): string {\r\n    return `StateToken[${this.name}]`;\r\n  }\r\n}\r\n"]}
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { NgxsConfig } from '../symbols';
import { MappedStore, StateClassInternal, StatesAndDefaults, StatesByName, RuntimeSelectorContext } from './internals';
import { InternalActions } from '../actions-stream';
import { InternalDispatchedActionResults } from '../internal/dispatcher';
import { StateContextFactory } from '../internal/state-context-factory';
/**
 * State factory class
 * @ignore
 */
import * as ɵngcc0 from '@angular/core';
export declare class StateFactory {
    private _injector;
    private _config;
    private _parentFactory;
    private _actions;
    private _actionResults;
    private _stateContextFactory;
    private _initialState;
    private _connected;
    constructor(_injector: Injector, _config: NgxsConfig, _parentFactory: StateFactory, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _stateContextFactory: StateContextFactory, _initialState: any);
    private _states;
    readonly states: MappedStore[];
    private _statesByName;
    readonly statesByName: StatesByName;
    private _statePaths;
    private readonly statePaths;
    getRuntimeSelectorContext: () => RuntimeSelectorContext;
    private static cloneDefaults;
    private static checkStatesAreValid;
    /**
     * Add a new state to the global defs.
     */
    add(stateClasses: StateClassInternal[]): MappedStore[];
    /**
     * Add a set of states to the store and return the defaults
     */
    addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults;
    /**
     * Bind the actions to the handlers
     */
    connectActionHandlers(): void;
    /**
     * Invoke actions on the states.
     */
    invokeActions(actions$: InternalActions, action: any): Observable<{}[]>;
    private addToStatesMap;
    private addRuntimeInfoToMeta;
    /**
     * @description
     * the method checks if the state has already been added to the tree
     * and completed the life cycle
     * @param name
     * @param path
     */
    private hasBeenMountedAndBootstrapped;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StateFactory, [null, null, { optional: true; skipSelf: true; }, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<StateFactory>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUtZmFjdG9yeS5kLnRzIiwic291cmNlcyI6WyJzdGF0ZS1mYWN0b3J5LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ3hzQ29uZmlnIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IE1hcHBlZFN0b3JlLCBTdGF0ZUNsYXNzSW50ZXJuYWwsIFN0YXRlc0FuZERlZmF1bHRzLCBTdGF0ZXNCeU5hbWUsIFJ1bnRpbWVTZWxlY3RvckNvbnRleHQgfSBmcm9tICcuL2ludGVybmFscyc7XHJcbmltcG9ydCB7IEludGVybmFsQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMtc3RyZWFtJztcclxuaW1wb3J0IHsgSW50ZXJuYWxEaXNwYXRjaGVkQWN0aW9uUmVzdWx0cyB9IGZyb20gJy4uL2ludGVybmFsL2Rpc3BhdGNoZXInO1xyXG5pbXBvcnQgeyBTdGF0ZUNvbnRleHRGYWN0b3J5IH0gZnJvbSAnLi4vaW50ZXJuYWwvc3RhdGUtY29udGV4dC1mYWN0b3J5JztcclxuLyoqXHJcbiAqIFN0YXRlIGZhY3RvcnkgY2xhc3NcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RhdGVGYWN0b3J5IHtcclxuICAgIHByaXZhdGUgX2luamVjdG9yO1xyXG4gICAgcHJpdmF0ZSBfY29uZmlnO1xyXG4gICAgcHJpdmF0ZSBfcGFyZW50RmFjdG9yeTtcclxuICAgIHByaXZhdGUgX2FjdGlvbnM7XHJcbiAgICBwcml2YXRlIF9hY3Rpb25SZXN1bHRzO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVDb250ZXh0RmFjdG9yeTtcclxuICAgIHByaXZhdGUgX2luaXRpYWxTdGF0ZTtcclxuICAgIHByaXZhdGUgX2Nvbm5lY3RlZDtcclxuICAgIGNvbnN0cnVjdG9yKF9pbmplY3RvcjogSW5qZWN0b3IsIF9jb25maWc6IE5neHNDb25maWcsIF9wYXJlbnRGYWN0b3J5OiBTdGF0ZUZhY3RvcnksIF9hY3Rpb25zOiBJbnRlcm5hbEFjdGlvbnMsIF9hY3Rpb25SZXN1bHRzOiBJbnRlcm5hbERpc3BhdGNoZWRBY3Rpb25SZXN1bHRzLCBfc3RhdGVDb250ZXh0RmFjdG9yeTogU3RhdGVDb250ZXh0RmFjdG9yeSwgX2luaXRpYWxTdGF0ZTogYW55KTtcclxuICAgIHByaXZhdGUgX3N0YXRlcztcclxuICAgIHJlYWRvbmx5IHN0YXRlczogTWFwcGVkU3RvcmVbXTtcclxuICAgIHByaXZhdGUgX3N0YXRlc0J5TmFtZTtcclxuICAgIHJlYWRvbmx5IHN0YXRlc0J5TmFtZTogU3RhdGVzQnlOYW1lO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVQYXRocztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhdGVQYXRocztcclxuICAgIGdldFJ1bnRpbWVTZWxlY3RvckNvbnRleHQ6ICgpID0+IFJ1bnRpbWVTZWxlY3RvckNvbnRleHQ7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBjbG9uZURlZmF1bHRzO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2hlY2tTdGF0ZXNBcmVWYWxpZDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IHN0YXRlIHRvIHRoZSBnbG9iYWwgZGVmcy5cclxuICAgICAqL1xyXG4gICAgYWRkKHN0YXRlQ2xhc3NlczogU3RhdGVDbGFzc0ludGVybmFsW10pOiBNYXBwZWRTdG9yZVtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBzZXQgb2Ygc3RhdGVzIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIHRoZSBkZWZhdWx0c1xyXG4gICAgICovXHJcbiAgICBhZGRBbmRSZXR1cm5EZWZhdWx0cyhzdGF0ZUNsYXNzZXM6IFN0YXRlQ2xhc3NJbnRlcm5hbFtdKTogU3RhdGVzQW5kRGVmYXVsdHM7XHJcbiAgICAvKipcclxuICAgICAqIEJpbmQgdGhlIGFjdGlvbnMgdG8gdGhlIGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3RBY3Rpb25IYW5kbGVycygpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2UgYWN0aW9ucyBvbiB0aGUgc3RhdGVzLlxyXG4gICAgICovXHJcbiAgICBpbnZva2VBY3Rpb25zKGFjdGlvbnMkOiBJbnRlcm5hbEFjdGlvbnMsIGFjdGlvbjogYW55KTogT2JzZXJ2YWJsZTx7fVtdPjtcclxuICAgIHByaXZhdGUgYWRkVG9TdGF0ZXNNYXA7XHJcbiAgICBwcml2YXRlIGFkZFJ1bnRpbWVJbmZvVG9NZXRhO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb25cclxuICAgICAqIHRoZSBtZXRob2QgY2hlY2tzIGlmIHRoZSBzdGF0ZSBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkIHRvIHRoZSB0cmVlXHJcbiAgICAgKiBhbmQgY29tcGxldGVkIHRoZSBsaWZlIGN5Y2xlXHJcbiAgICAgKiBAcGFyYW0gbmFtZVxyXG4gICAgICogQHBhcmFtIHBhdGhcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYXNCZWVuTW91bnRlZEFuZEJvb3RzdHJhcHBlZDtcclxufVxyXG4iXX0=
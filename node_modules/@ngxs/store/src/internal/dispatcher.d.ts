import { ErrorHandler } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { ActionContext, InternalActions } from '../actions-stream';
import { StateStream } from './state-stream';
import { PluginManager } from '../plugin-manager';
import { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';
/**
 * Internal Action result stream that is emitted when an action is completed.
 * This is used as a method of returning the action result to the dispatcher
 * for the observable returned by the dispatch(...) call.
 * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.
 */
import * as ɵngcc0 from '@angular/core';
export declare class InternalDispatchedActionResults extends Subject<ActionContext> {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InternalDispatchedActionResults, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<InternalDispatchedActionResults>;
}
export declare class InternalDispatcher {
    private _errorHandler;
    private _actions;
    private _actionResults;
    private _pluginManager;
    private _stateStream;
    private _ngxsExecutionStrategy;
    constructor(_errorHandler: ErrorHandler, _actions: InternalActions, _actionResults: InternalDispatchedActionResults, _pluginManager: PluginManager, _stateStream: StateStream, _ngxsExecutionStrategy: InternalNgxsExecutionStrategy);
    /**
     * Dispatches event(s).
     */
    dispatch(actionOrActions: any | any[]): Observable<any>;
    private dispatchByEvents;
    private dispatchSingle;
    private getActionResultStream;
    private createDispatchObservable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InternalDispatcher, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<InternalDispatcher>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2hlci5kLnRzIiwic291cmNlcyI6WyJkaXNwYXRjaGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEFjdGlvbkNvbnRleHQsIEludGVybmFsQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMtc3RyZWFtJztcclxuaW1wb3J0IHsgU3RhdGVTdHJlYW0gfSBmcm9tICcuL3N0YXRlLXN0cmVhbSc7XHJcbmltcG9ydCB7IFBsdWdpbk1hbmFnZXIgfSBmcm9tICcuLi9wbHVnaW4tbWFuYWdlcic7XHJcbmltcG9ydCB7IEludGVybmFsTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IH0gZnJvbSAnLi4vZXhlY3V0aW9uL2ludGVybmFsLW5neHMtZXhlY3V0aW9uLXN0cmF0ZWd5JztcclxuLyoqXHJcbiAqIEludGVybmFsIEFjdGlvbiByZXN1bHQgc3RyZWFtIHRoYXQgaXMgZW1pdHRlZCB3aGVuIGFuIGFjdGlvbiBpcyBjb21wbGV0ZWQuXHJcbiAqIFRoaXMgaXMgdXNlZCBhcyBhIG1ldGhvZCBvZiByZXR1cm5pbmcgdGhlIGFjdGlvbiByZXN1bHQgdG8gdGhlIGRpc3BhdGNoZXJcclxuICogZm9yIHRoZSBvYnNlcnZhYmxlIHJldHVybmVkIGJ5IHRoZSBkaXNwYXRjaCguLi4pIGNhbGwuXHJcbiAqIFRoZSBkaXNwYXRjaGVyIHRoZW4gYXN5bmNocm9ub3VzbHkgcHVzaGVzIHRoZSByZXN1bHQgZnJvbSB0aGlzIHN0cmVhbSBvbnRvIHRoZSBtYWluIGFjdGlvbiBzdHJlYW0gYXMgYSByZXN1bHQuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbnRlcm5hbERpc3BhdGNoZWRBY3Rpb25SZXN1bHRzIGV4dGVuZHMgU3ViamVjdDxBY3Rpb25Db250ZXh0PiB7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW50ZXJuYWxEaXNwYXRjaGVyIHtcclxuICAgIHByaXZhdGUgX2Vycm9ySGFuZGxlcjtcclxuICAgIHByaXZhdGUgX2FjdGlvbnM7XHJcbiAgICBwcml2YXRlIF9hY3Rpb25SZXN1bHRzO1xyXG4gICAgcHJpdmF0ZSBfcGx1Z2luTWFuYWdlcjtcclxuICAgIHByaXZhdGUgX3N0YXRlU3RyZWFtO1xyXG4gICAgcHJpdmF0ZSBfbmd4c0V4ZWN1dGlvblN0cmF0ZWd5O1xyXG4gICAgY29uc3RydWN0b3IoX2Vycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyLCBfYWN0aW9uczogSW50ZXJuYWxBY3Rpb25zLCBfYWN0aW9uUmVzdWx0czogSW50ZXJuYWxEaXNwYXRjaGVkQWN0aW9uUmVzdWx0cywgX3BsdWdpbk1hbmFnZXI6IFBsdWdpbk1hbmFnZXIsIF9zdGF0ZVN0cmVhbTogU3RhdGVTdHJlYW0sIF9uZ3hzRXhlY3V0aW9uU3RyYXRlZ3k6IEludGVybmFsTmd4c0V4ZWN1dGlvblN0cmF0ZWd5KTtcclxuICAgIC8qKlxyXG4gICAgICogRGlzcGF0Y2hlcyBldmVudChzKS5cclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2goYWN0aW9uT3JBY3Rpb25zOiBhbnkgfCBhbnlbXSk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIHByaXZhdGUgZGlzcGF0Y2hCeUV2ZW50cztcclxuICAgIHByaXZhdGUgZGlzcGF0Y2hTaW5nbGU7XHJcbiAgICBwcml2YXRlIGdldEFjdGlvblJlc3VsdFN0cmVhbTtcclxuICAgIHByaXZhdGUgY3JlYXRlRGlzcGF0Y2hPYnNlcnZhYmxlO1xyXG59XHJcbiJdfQ==
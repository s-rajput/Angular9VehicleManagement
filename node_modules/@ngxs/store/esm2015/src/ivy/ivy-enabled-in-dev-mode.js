/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isDevMode } from '@angular/core';
import { ReplaySubject } from 'rxjs';
/**
 * Keep it as a single `const` variable since this `ReplaySubject`
 * will be private and accessible only within this file.
 * @type {?}
 */
const _ivyEnabledInDevMode$ = new ReplaySubject(1);
/**
 * Ivy exposes helper functions to the global `window.ng` object.
 * Those functions are `getComponent, getContext,
 * getListeners, getViewComponent, getHostElement, getInjector,
 * getRootComponents, getDirectives, getDebugNode`
 * Previously, old view engine exposed `window.ng.coreTokens` and
 * `window.ng.probe` if an application was in development/production.
 * Ivy doesn't expose these functions in production. Developers will be able
 * to see warnings in both JIT/AOT modes, but only if an application
 * is in development.
 * @return {?}
 */
export function setIvyEnabledInDevMode() {
    try {
        // `try-catch` will also handle server-side rendering, as
        // `window is not defined` will not be thrown.
        /** @type {?} */
        const ng = ((/** @type {?} */ (window))).ng;
        /** @type {?} */
        const _viewEngineEnabled = !!ng.probe && !!ng.coreTokens;
        /** @type {?} */
        const _ivyEnabledInDevMode = !_viewEngineEnabled && isDevMode();
        _ivyEnabledInDevMode$.next(_ivyEnabledInDevMode);
    }
    catch (_a) {
        _ivyEnabledInDevMode$.next(false);
    }
    finally {
        _ivyEnabledInDevMode$.complete();
    }
}
/**
 * @return {?}
 */
export function ivyEnabledInDevMode() {
    return _ivyEnabledInDevMode$.asObservable();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pdnkvaXZ5LWVuYWJsZWQtaW4tZGV2LW1vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7O01BTTNDLHFCQUFxQixHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWEzRCxNQUFNLFVBQVUsc0JBQXNCO0lBQ3BDLElBQUk7Ozs7Y0FHSSxFQUFFLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLEVBQUU7O2NBQ3ZCLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVTs7Y0FDbEQsb0JBQW9CLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxTQUFTLEVBQUU7UUFDL0QscUJBQXFCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7S0FDbEQ7SUFBQyxXQUFNO1FBQ04scUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25DO1lBQVM7UUFDUixxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUNsQztBQUNILENBQUM7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CO0lBQ2pDLE9BQU8scUJBQXFCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGV2TW9kZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogS2VlcCBpdCBhcyBhIHNpbmdsZSBgY29uc3RgIHZhcmlhYmxlIHNpbmNlIHRoaXMgYFJlcGxheVN1YmplY3RgXHJcbiAqIHdpbGwgYmUgcHJpdmF0ZSBhbmQgYWNjZXNzaWJsZSBvbmx5IHdpdGhpbiB0aGlzIGZpbGUuXHJcbiAqL1xyXG5jb25zdCBfaXZ5RW5hYmxlZEluRGV2TW9kZSQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcclxuXHJcbi8qKlxyXG4gKiBJdnkgZXhwb3NlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHRoZSBnbG9iYWwgYHdpbmRvdy5uZ2Agb2JqZWN0LlxyXG4gKiBUaG9zZSBmdW5jdGlvbnMgYXJlIGBnZXRDb21wb25lbnQsIGdldENvbnRleHQsXHJcbiAqIGdldExpc3RlbmVycywgZ2V0Vmlld0NvbXBvbmVudCwgZ2V0SG9zdEVsZW1lbnQsIGdldEluamVjdG9yLFxyXG4gKiBnZXRSb290Q29tcG9uZW50cywgZ2V0RGlyZWN0aXZlcywgZ2V0RGVidWdOb2RlYFxyXG4gKiBQcmV2aW91c2x5LCBvbGQgdmlldyBlbmdpbmUgZXhwb3NlZCBgd2luZG93Lm5nLmNvcmVUb2tlbnNgIGFuZFxyXG4gKiBgd2luZG93Lm5nLnByb2JlYCBpZiBhbiBhcHBsaWNhdGlvbiB3YXMgaW4gZGV2ZWxvcG1lbnQvcHJvZHVjdGlvbi5cclxuICogSXZ5IGRvZXNuJ3QgZXhwb3NlIHRoZXNlIGZ1bmN0aW9ucyBpbiBwcm9kdWN0aW9uLiBEZXZlbG9wZXJzIHdpbGwgYmUgYWJsZVxyXG4gKiB0byBzZWUgd2FybmluZ3MgaW4gYm90aCBKSVQvQU9UIG1vZGVzLCBidXQgb25seSBpZiBhbiBhcHBsaWNhdGlvblxyXG4gKiBpcyBpbiBkZXZlbG9wbWVudC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRJdnlFbmFibGVkSW5EZXZNb2RlKCk6IHZvaWQge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBgdHJ5LWNhdGNoYCB3aWxsIGFsc28gaGFuZGxlIHNlcnZlci1zaWRlIHJlbmRlcmluZywgYXNcclxuICAgIC8vIGB3aW5kb3cgaXMgbm90IGRlZmluZWRgIHdpbGwgbm90IGJlIHRocm93bi5cclxuICAgIGNvbnN0IG5nID0gKHdpbmRvdyBhcyBhbnkpLm5nO1xyXG4gICAgY29uc3QgX3ZpZXdFbmdpbmVFbmFibGVkID0gISFuZy5wcm9iZSAmJiAhIW5nLmNvcmVUb2tlbnM7XHJcbiAgICBjb25zdCBfaXZ5RW5hYmxlZEluRGV2TW9kZSA9ICFfdmlld0VuZ2luZUVuYWJsZWQgJiYgaXNEZXZNb2RlKCk7XHJcbiAgICBfaXZ5RW5hYmxlZEluRGV2TW9kZSQubmV4dChfaXZ5RW5hYmxlZEluRGV2TW9kZSk7XHJcbiAgfSBjYXRjaCB7XHJcbiAgICBfaXZ5RW5hYmxlZEluRGV2TW9kZSQubmV4dChmYWxzZSk7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIF9pdnlFbmFibGVkSW5EZXZNb2RlJC5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGl2eUVuYWJsZWRJbkRldk1vZGUoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgcmV0dXJuIF9pdnlFbmFibGVkSW5EZXZNb2RlJC5hc09ic2VydmFibGUoKTtcclxufVxyXG4iXX0=